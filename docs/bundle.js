(()=>{"use strict";const t=function(){function t(t,e){this.email=t,this.isValid=e,this.validEmail='<span class="email">'+this.email+'\n                          <a class="js-delete-tag" title="Remove tag">\n                            x\n                          </a>\n                        </span>',this.invalidEmail='<span class="emailInvalid">'+this.email+'\n                            <a class="js-delete-tag" title="Remove tag">\n                              x\n                            </a>\n                          </span>'}return t.prototype.deleteTag=function(t){var e=t.parentElement;null==e||e.remove()},t.prototype.stringToHTML=function(t){var e=this,n=(new DOMParser).parseFromString(t,"text/html");return n.getElementsByClassName("js-delete-tag")[0].addEventListener("click",(function(t){t.preventDefault(),e.deleteTag(this)})),n.body},t.prototype.getEmailHTML=function(){return this.isValid?this.stringToHTML(this.validEmail):this.stringToHTML(this.invalidEmail)},t}(),e=function(){function e(t){this.email=t}return e.prototype.checkEmail=function(){return new RegExp(/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/).test(this.email)},e.prototype.render=function(e){var n=new t(this.email,this.checkEmail()),i=e.lastElementChild,a=n.getEmailHTML();0!=a.childNodes.length&&e.insertBefore(a.childNodes[0],i)},e}();function n(t,n){t.trim().split(",").filter((function(t){return t})).forEach((function(t){!function(t,e){t.render(e)}(new e(t.trim()),n)}))}var i,a,l,s;i=document.getElementById("emailsContainer"),a=document.getElementById("emailsInput"),l=document.getElementById("addEmail"),s=document.getElementById("getEmails"),a.addEventListener("keyup",(function(t){this.value.length<3||("Enter"!==t.key&&","!==t.key||(n(this.value,i),this.value=""),a.focus())})),a.addEventListener("focusout",(function(t){this.value.length<3||(n(this.value,i),this.value="")})),s.addEventListener("click",(function(t){var e=function(t){return t.getElementsByClassName("email").length}(i);e>1?alert("You have "+e+" valid emails"):alert("You have "+e+" valid email"),a.focus()})),l.addEventListener("click",(function(t){n(function(){for(var t="abcdefghijklmno",e="",n=0;n<6;n++)e+=t.charAt(Math.round(t.length*Math.random()));e+="@";for(var i=0;i<4;i++)e+=t.charAt(Math.round(t.length*Math.random()));return e+".com"}(),i),a.focus()})),i.addEventListener("click",(function(t){a.focus()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
